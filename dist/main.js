(()=>{"use strict";const e=(e,t)=>{let r={};return r.name=t,r.length=e,r.hitCount=0,r.sunk=!1,r.orientation="horizontal",r.comp=[],r.hitCoor=[],{getShip:()=>r,hit:()=>{r.hitCount+=1,r.hitCount===r.length&&(r.sunk=!0)},isSunk:()=>!0===r.sunk,resetShip:()=>(r.name=t,r.length=e,r.hitCount=0,r.sunk=!1,r.orientation="horizontal",r.comp=[],r.hitCoor=[],r)}},t=()=>{let t=[],r=[],o=[],a={battleship:e(4,"battleship"),cruiser_I:e(3,"cruiser_I"),cruiser_II:e(3,"cruiser_II"),destroyer_I:e(2,"destroyer_I"),destroyer_II:e(2,"destroyer_II"),destroyer_III:e(2,"destroyer_III"),submarine_I:e(1,"submarine_I"),submarine_II:e(1,"submarine_II"),submarine_III:e(1,"submarine_III"),submarine_IV:e(1,"submarine_IV")};const l=e=>{let r=!0;return e.forEach((e=>{if(e[0]>9||e[1]>9||(o=e[0],a=e[1],null!==t[o][a]))return r=!1;var o,a})),r},n=(e,t,r)=>{const o=r.getShip().length;let a=[],l=e,n=t;if("horizontal"===r.getShip().orientation)for(;n!==t+o;)a.push([e,n]),n+=1;else for(;l!==e+o;)a.push([l,t]),l+=1;return a},u=(e,r,o)=>{let a=[],u=!0;return r+length-1>9||e>9||e+length-1>9||r>9?alert("Ship is out of bound"):(a=n(e,r,o),u=l(a),!1===u?(u=!0,a=[],alert("square is already occupied")):(o.getShip().comp=a,o.getShip().comp.forEach((e=>{t[e[0]][e[1]]=o})),t))};return{createBoard:()=>{for(let e=0;e<10;e++){t[e]=[];for(let r=0;r<10;r++)t[e][r]=null}return t},placeShip:u,getBoard:()=>t,getShips:()=>a,receiveAttack:(e,a)=>(null===t[e][a]?r.push([e,a]):(o.push([e,a]),t[e][a].hit(),t[e][a].getShip().hitCoor.push([e,a])),t),getMisses:()=>r,getHits:()=>o,isAllSunk:()=>{const e=Object.values(a);let t=!0;return e.forEach((e=>{if(!e.isSunk())return t=!1})),t},populateBd:()=>{const e=Object.keys(a),r=["horizontal","vertical"];return e.forEach((e=>{const t=a[e],o=t.getShip().length;let s=Math.floor(10*Math.random()),c=Math.floor(10*Math.random()),d=Math.floor(2*Math.random());t.getShip().orientation=r[d];let i=n(s,c,t),m=l(i);for(;c+o-1>9||s+o-1>9||!1===m;)s=Math.floor(10*Math.random()),c=Math.floor(10*Math.random()),d=Math.floor(2*Math.random()),t.getShip().orientation=r[d],i=n(s,c,t),m=l(i);u(s,c,t)})),t},resetBoard:()=>{const e=Object.keys(a);t=[],r=[],o=[],e.forEach((e=>{a[e].resetShip()}))}}},r=e=>({number:e,win:!1,board:t(),isComp:!1}),o=(e,t,r,o,a)=>{const l=e.board.getMisses();null===t?l.find((e=>e[0]===o&&e[1]===a))?r.setAttribute("style","background-color: yellow;"):r.setAttribute("style","background-color: blue;"):t.getShip().hitCoor.find((e=>e[0]===o&&e[1]===a))&&r.setAttribute("style","background-color: red;")},a=e=>{e.board.createBoard(),(e=>{e.board.getBoard();const t=e.board.getShips();Object.keys(t).forEach((r=>{const o=t[r].getShip().comp;if(0!==o.length){const a=o[0][0],l=o[0][1];e.board.placeShip(a,l,t[r])}}))})(e);const t=e.board.getBoard(),r=e.number;let a=document.getElementById(`board${r}`);for(;a.lastElementChild;)a.removeChild(a.lastElementChild);for(let l=0;l<t.length;l++)for(let n=0;n<t.length;n++){const u=document.createElement("div");u.classList.add(`${r}-square`),u.setAttribute("data-x",`${l}`),u.setAttribute("data-y",`${n}`),o(e,t[l][n],u,l,n),a.appendChild(u)}return a},l=e=>{document.querySelectorAll(`.${e.number}-square`).forEach((e=>{e.setAttribute("disabled",""),e.setAttribute("style","background-color: gray;")}))},n=(e,t,r)=>{let o,a,l;for("player-Two"===r?(o=t.board.getBoard(),a=t.board.getMisses(),l=document.querySelector(`#board${t.number}`)):(o=e.board.getBoard(),a=e.board.getMisses(),l=document.querySelector(`#board${e.number}`));l.lastElementChild;)l.removeChild(l.lastElementChild);for(let n=0;n<o.length;n++)for(let s=0;s<o.length;s++){const c=o[n][s],d=document.createElement("button");"player-One"===r?d.classList.add(`${e.number}-square`):d.classList.add(`${t.number}-square`),d.setAttribute("data-x",`${n}`),d.setAttribute("data-y",`${s}`),u(e,t,d),null!==c&&c.getShip().hitCount>0&&c.getShip().hitCoor.find((e=>e[0]===n&&e[1]===s))&&(d.setAttribute("style","background-color: red;"),d.setAttribute("disabled","")),a.find((e=>e[0]===n&&e[1]===s))&&(d.setAttribute("style","background-color: green;"),d.setAttribute("disabled","")),l.appendChild(d)}},u=(e,t,r)=>{const o=document.querySelector(".dialog"),a=parseInt(r.getAttribute("data-x")),n=parseInt(r.getAttribute("data-y")),u=document.querySelector(".winner"),s=document.querySelector(".end-game"),d=document.querySelector("#play-window"),i=document.querySelector(".player-name"),m=document.querySelector("main");r.addEventListener("click",(h=>{h.preventDefault();const p=r.getAttribute("class"),y=d.getAttribute("data-id"),b=m.getAttribute("class");let S,g;S="One-square"===p?e.board:t.board,g=S.getBoard(),S.receiveAttack(a,n),null===g[a][n]?(l("One-square"===p?t:e),r.setAttribute("style","background-color: yellow;"),i.textContent="pvc"===b?"Computer`s turn!":"player-One"===y?"Player Two`s turn!":"Player One`s turn!",o.showModal()):(c(g[a][n],"One-square"===p?e.number:t.number),r.setAttribute("style","background-color: red;"),S.isAllSunk()&&(r.setAttribute("style","background-color: red;"),s.showModal(),u.textContent="player-Two"===y?"Congratulations Player Two!":"Congratulations Player One!"))}))},s=e=>{const t=e.board.getShips()[document.querySelector("#ships").value].getShip().length,r=document.querySelector(".shape");for(;r.lastElementChild;)r.removeChild(r.lastElementChild);for(let e=1;e<=t;e++){const e=document.createElement("div");e.classList.add("square"),r.appendChild(e)}},c=(e,t)=>{const r=e.getShip().name,o=document.querySelector(`.shiplist-${t}`).querySelector(`.${r}`).querySelectorAll(".square");e.isSunk()&&o.forEach((e=>{e.setAttribute("style","background-color: red;")}))},d=document.querySelector(".game_mode"),i=document.querySelector("#pvp"),m=document.querySelector("#pvc"),h=document.querySelectorAll(".restart"),p=document.querySelector(".end-game"),y=document.querySelector("form"),b=document.querySelector("#ships"),S=document.querySelector("#orientation");let g=r("One"),f=r("Two");var q,v;q=g,v=f,document.querySelector("#placeShipBtn").addEventListener("click",(e=>{e.preventDefault();let t=document.querySelector("form").getAttribute("id");const r=parseInt(document.querySelector("#y-coor").value),o=parseInt(document.querySelector("#x-coor").value),l=document.querySelector("#ships").value,n=document.querySelector("#orientation").value;let u;u="playerOne-form"===t?q.board.getShips()[l]:v.board.getShips()[l],u.getShip().orientation=n,Number.isNaN(r)||Number.isNaN(o)||("playerOne-form"===t?(q.board.placeShip(r,o,u),a(q)):(v.board.placeShip(r,o,u),a(v)))})),((e,t)=>{const r=document.querySelector("main"),o=document.querySelector("#finBtn"),a=document.querySelector("form"),n=document.querySelector(".player-name");let u=!1;o.addEventListener("click",(o=>{let c;o.preventDefault();const d=r.getAttribute("class");let i=a.getAttribute("id");if(c="playerOne-form"===i?e.board.getShips():t.board.getShips(),Object.values(c).forEach((e=>{const t=e.getShip().comp;return u=0!==t.length})),u){const r=document.querySelector(".shape"),o=document.querySelector("#ships"),u=document.querySelector("#x-coor"),c=document.querySelector("#y-coor"),m=o.querySelector(".battleship"),h=document.querySelector(".message");if(u.value="",c.value="",r.classList.remove("vertical"),m.removeAttribute("selected"),m.setAttribute("selected",""),s(t),"playerOne-form"===i&&(h.textContent="Player Two please set up your board",a.setAttribute("id","playerTwo-form"),l(e)),"pvc"===d||"playerTwo-form"===i){a.setAttribute("style","display: none;"),h.setAttribute("style","display: none;"),l(t);const e=document.querySelector(".dialog");n.textContent="Player One`s turn!",e.showModal()}}else alert("Please place all the ships first")}))})(g,f),((e,t)=>{const r=document.querySelector("main"),o=document.querySelector(".dialog"),l=document.querySelector("#play-window");document.querySelector("#play").addEventListener("click",(u=>{u.preventDefault();let s=l.getAttribute("data-id");if("player-Two"===s)return a(e),n(e,t,s),l.setAttribute("data-id",`player-${e.number}`),o.close();if("player-One"===s){const u=r.getAttribute("class");return l.setAttribute("data-id",`player-${t.number}`),"pvc"===u?(((e,t)=>{const r=e.board,o=r.getBoard(),l=r.getMisses(),u=r.getHits(),s=document.querySelector("#play-window"),d=document.querySelector(".winner"),i=document.querySelector(".end-game");let m=Math.floor(10*Math.random()),h=Math.floor(10*Math.random()),p=!0;for(;!0===p;)if(l.find((e=>e[0]===m&&e[1]===h))||u.find((e=>e[0]===m&&e[1]===h)))m=Math.floor(10*Math.random()),h=Math.floor(10*Math.random());else if(r.receiveAttack(m,h),null===o[m][h]){const r=`player-${t.number}`;s.setAttribute("data-id",`player-${e.number}`),a(e),n(e,t,r),p=!1}else e.board.isAllSunk()?(p=!1,i.showModal(),d.textContent="Computer won!"):(c(e.board.getBoard()[m][h],e.number),m=Math.floor(10*Math.random()),h=Math.floor(10*Math.random()))})(e,t),o.close()):(a(t),n(e,t,s),o.close())}}))})(g,f),((e,t)=>{const r=document.querySelector("form");document.querySelector("#random").addEventListener("click",(o=>{o.preventDefault(),"playerOne-form"===r.getAttribute("id")?(e.board.populateBd(),a(e)):(t.board.populateBd(),a(t))}))})(g,f),a(g),a(f),s(g),i.addEventListener("click",(e=>(e.preventDefault(),d.close()))),m.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector("main");var r;return(r=f).board.populateBd(),a(r),l(r),t.classList.add("pvc"),d.close()})),h.forEach((e=>e.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector("main"),r=document.querySelector("#play-window"),o=document.querySelector("#x-coor"),l=document.querySelector("#y-coor"),n=b.querySelector(".battleship"),u=document.querySelectorAll(".square"),c=document.querySelector(".shape"),i=document.querySelector(".message");p.close(),y.setAttribute("id","playerOne-form"),y.removeAttribute("style"),t.classList.remove("pvc"),c.classList.remove("vertical"),r.setAttribute("data-id","player-Two"),u.forEach((e=>{e.removeAttribute("style")})),o.value="",l.value="",n.removeAttribute("selected"),n.setAttribute("selected",""),i.textContent="Player One please set up your board",i.removeAttribute("style"),s(g),g.board.resetBoard(),f.board.resetBoard(),a(g),a(f),d.showModal()})))),b.addEventListener("change",(()=>{s(g)})),S.addEventListener("change",(()=>{const e=document.querySelector(".shape");"vertical"===S.value?e.classList.add("vertical"):e.classList.remove("vertical")})),document.addEventListener("onload",d.showModal())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,