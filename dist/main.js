(()=>{"use strict";const e=e=>{let t={};return t.length=e,t.hitCount=0,t.sunk=!1,t.orientation="horizontal",t.comp=[],t.hitCoor=[],{getShip:()=>t,hit:()=>{t.hitCount+=1,t.hitCount===t.length&&(t.sunk=!0)},isSunk:()=>!0===t.sunk}},t=()=>{let t=[],r=[],o=[],a={l_ship:e(4),m_ship_I:e(3),m_ship_II:e(3),s_ship_I:e(2),s_ship_II:e(2),s_ship_III:e(2),xs_ship_I:e(1),xs_ship_II:e(1),xs_ship_III:e(1),xs_ship_IV:e(1)};const n=e=>{let r=!0;return e.forEach((e=>{if(e[0]>9||e[1]>9||(o=e[0],a=e[1],null!==t[o][a]))return r=!1;var o,a})),r},l=(e,t,r)=>{const o=r.getShip().length;let a=[],n=e,l=t;if("horizontal"===r.getShip().orientation)for(;l!==t+o;)a.push([e,l]),l+=1;else for(;n!==e+o;)a.push([n,t]),n+=1;return a},i=(e,r,o)=>{let a=[],i=!0;return r+length-1>9||e>9||e+length-1>9||r>9?alert("Ship is out of bound"):(a=l(e,r,o),i=n(a),!1===i?(i=!0,a=[],alert("square is already occupied")):(o.getShip().comp=a,o.getShip().comp.forEach((e=>{t[e[0]][e[1]]=o})),t))};return{createBoard:()=>{for(let e=0;e<10;e++){t[e]=[];for(let r=0;r<10;r++)t[e][r]=null}return t},placeShip:i,getBoard:()=>t,getShips:()=>a,receiveAttack:(e,a)=>(null===t[e][a]?r.push([e,a]):(o.push([e,a]),t[e][a].hit(),t[e][a].getShip().hitCoor.push([e,a])),t),getMisses:()=>r,getHits:()=>o,isAllSunk:()=>{const e=Object.values(a);let t=!1;return e.forEach((e=>{if(!1===e.getShip().sunk)return t=!1;t=!0})),t},populateBd:()=>{const e=Object.keys(a),r=["horizontal","vertical"];return e.forEach((e=>{const t=a[e],o=t.getShip().length;let s=Math.floor(10*Math.random()),d=Math.floor(10*Math.random()),c=Math.floor(2*Math.random());t.getShip().orientation=r[c];let u=l(s,d,t),h=n(u);for(;d+o-1>9||s+o-1>9||!1===h;)s=Math.floor(10*Math.random()),d=Math.floor(10*Math.random()),c=Math.floor(2*Math.random()),t.getShip().orientation=r[c],u=l(s,d,t),h=n(u);i(s,d,t)})),t}}},r=e=>({number:e,win:!1,board:t(),isComp:!1}),o=(e,t,r,o,a)=>{const n=e.board.getMisses();null===t?n.find((e=>e[0]===o&&e[1]===a))?r.setAttribute("style","background-color: yellow;"):r.setAttribute("style","background-color: blue;"):t.getShip().hitCoor.find((e=>e[0]===o&&e[1]===a))&&r.setAttribute("style","background-color: red;")},a=e=>{e.board.createBoard(),(e=>{e.board.getBoard();const t=e.board.getShips();Object.keys(t).forEach((r=>{const o=t[r].getShip().comp;if(0!==o.length){const a=o[0][0],n=o[0][1];e.board.placeShip(a,n,t[r])}}))})(e);const t=e.board.getBoard(),r=e.number;let a=document.getElementById(`board${r}`);for(;a.lastElementChild;)a.removeChild(a.lastElementChild);for(let n=0;n<t.length;n++)for(let l=0;l<t.length;l++){const i=document.createElement("div");i.classList.add(`${r}-square`),i.setAttribute("data-x",`${n}`),i.setAttribute("data-y",`${l}`),o(e,t[n][l],i,n,l),a.appendChild(i)}return a},n=(e,t)=>{let r;"playerOne-form"===document.querySelector("form").getAttribute("id")?r=e.board.getShips():t.board.getShips();const o=Object.keys(r),a=document.querySelector("#ships");return o.forEach((e=>{const t=document.createElement("option");t.textContent=e,a.appendChild(t)})),a},l=(e,t)=>{document.querySelector("#placeShipBtn").addEventListener("click",(r=>{r.preventDefault();let o=document.querySelector("form").getAttribute("id");const n=parseInt(document.querySelector("#y-coor").value),l=parseInt(document.querySelector("#x-coor").value),i=document.querySelector("#ships").value,s=document.querySelector("#orientation").value;let d;d="playerOne-form"===o?e.board.getShips()[i]:t.board.getShips()[i],d.getShip().orientation=s,Number.isNaN(n)||Number.isNaN(l)||("playerOne-form"===o?(e.board.placeShip(n,l,d),a(e)):(t.board.placeShip(n,l,d),a(t)))}))},i=(e,t)=>{const r=document.querySelector("main"),o=document.querySelector("#finBtn"),a=document.querySelector("form");let n=!1;o.addEventListener("click",(o=>{let l;o.preventDefault();const i=r.getAttribute("class");let d=a.getAttribute("id");l="playerOne-form"===d?e.board.getShips():t.board.getShips(),Object.values(l).forEach((e=>{const t=e.getShip().comp;return n=0!==t.length})),n?("playerOne-form"===d&&(a.setAttribute("id","playerTwo-form"),s(e)),("pvc"===i||"playerTwo-form"===d)&&(a.setAttribute("style","display: none;"),s(t),document.querySelector(".dialog").showModal())):alert("Please place all the ships first")}))},s=e=>{document.querySelectorAll(`.${e.number}-square`).forEach((e=>{e.setAttribute("disabled",""),e.setAttribute("style","background-color: gray;")}))},d=(e,t)=>{const r=document.querySelector("main"),o=document.querySelector(".dialog"),n=document.querySelector("#play-window");document.querySelector("#play").addEventListener("click",(l=>{l.preventDefault();let i=n.getAttribute("data-id");if("player-Two"===i)return a(e),c(t),n.setAttribute("data-id",`player-${e.number}`),o.close();if("player-One"===i){const l=r.getAttribute("class");return n.setAttribute("data-id",`player-${t.number}`),"pvc"===l?(h(e,t),o.close()):(a(t),c(e),o.close())}}))},c=e=>{const t=e.board.getBoard(),r=e.board.getMisses(),o=document.querySelector(`#board${e.number}`);for(;o.lastElementChild;)o.removeChild(o.lastElementChild);for(let a=0;a<t.length;a++)for(let n=0;n<t.length;n++){const l=t[a][n],i=document.createElement("button");i.classList.add(`${e.number}-square`),i.setAttribute("data-x",`${a}`),i.setAttribute("data-y",`${n}`),u(e,i),null!==l&&l.getShip().hitCount>0&&l.getShip().hitCoor.find((e=>e[0]===a&&e[1]===n))&&(i.setAttribute("style","background-color: red;"),i.setAttribute("disabled","")),r.find((e=>e[0]===a&&e[1]===n))&&(i.setAttribute("style","background-color: green;"),i.setAttribute("disabled","")),o.appendChild(i)}},u=(e,t)=>{const r=e.board,o=r.getBoard(),a=document.querySelector(".dialog"),n=parseInt(t.getAttribute("data-x")),l=parseInt(t.getAttribute("data-y"));t.addEventListener("click",(i=>{i.preventDefault(),r.receiveAttack(n,l),null===o[n][l]?(s(e),t.setAttribute("style","background-color: red;"),a.showModal()):t.setAttribute("style","background-color: green;")}))},h=(e,t)=>{const r=e.board,o=r.getBoard(),n=r.getMisses(),l=r.getHits(),i=document.querySelector("#play-window");let s=Math.floor(10*Math.random()),d=Math.floor(10*Math.random()),u=!0;for(;!0===u;)n.find((e=>e[0]===s&&e[1]===d))||l.find((e=>e[0]===s&&e[1]===d))?(s=Math.floor(10*Math.random()),d=Math.floor(10*Math.random())):(r.receiveAttack(s,d),null===o[s][d]?(i.setAttribute("data-id",`player-${e.number}`),a(e),c(t),u=!1):(s=Math.floor(10*Math.random()),d=Math.floor(10*Math.random())))},p=document.querySelector(".game_mode"),m=document.querySelector("#pvp"),b=document.querySelector("#pvc"),g=r("One"),f=r("Two");m.addEventListener("click",(e=>(e.preventDefault(),a(g),a(f),n(g,f),l(g,f),i(g,f),d(g,f),p.close()))),b.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector("main");var r;return a(g),a(f),n(g,f),l(g,f),i(g,f),d(g,f),(r=f).board.populateBd(),a(r),s(r),t.classList.add("pvc"),p.close()})),document.addEventListener("onload",p.showModal())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,