(()=>{"use strict";const e=(e,t)=>{let r={};return r.name=t,r.length=e,r.hitCount=0,r.sunk=!1,r.orientation="horizontal",r.comp=[],r.hitCoor=[],{getShip:()=>r,hit:()=>{r.hitCount+=1,r.hitCount===r.length&&(r.sunk=!0)},isSunk:()=>!0===r.sunk,resetShip:()=>(r.name=t,r.length=e,r.hitCount=0,r.sunk=!1,r.orientation="horizontal",r.comp=[],r.hitCoor=[],r)}},t=()=>{let t=[],r=[],o=[],a={battleship:e(4,"battleship"),cruiser_I:e(3,"cruiser_I"),cruiser_II:e(3,"cruiser_II"),destroyer_I:e(2,"destroyer_I"),destroyer_II:e(2,"destroyer_II"),destroyer_III:e(2,"destroyer_III"),submarine_I:e(1,"submarine_I"),submarine_II:e(1,"submarine_II"),submarine_III:e(1,"submarine_III"),submarine_IV:e(1,"submarine_IV")};const n=e=>{let r=!0;return e.forEach((e=>{if(e[0]>9||e[1]>9||(o=e[0],a=e[1],null!==t[o][a]))return r=!1;var o,a})),r},l=(e,t,r)=>{const o=r.getShip().length;let a=[],n=e,l=t;if("horizontal"===r.getShip().orientation)for(;l!==t+o;)a.push([e,l]),l+=1;else for(;n!==e+o;)a.push([n,t]),n+=1;return a},u=(e,r,o)=>{let a=[],u=!0;return r+length-1>9||e>9||e+length-1>9||r>9?alert("Ship is out of bound"):(a=l(e,r,o),u=n(a),!1===u?(u=!0,a=[],alert("square is already occupied")):(o.getShip().comp=a,o.getShip().comp.forEach((e=>{t[e[0]][e[1]]=o})),t))};return{createBoard:()=>{for(let e=0;e<10;e++){t[e]=[];for(let r=0;r<10;r++)t[e][r]=null}return t},placeShip:u,getBoard:()=>t,getShips:()=>a,receiveAttack:(e,a)=>(null===t[e][a]?r.push([e,a]):(o.push([e,a]),t[e][a].hit(),t[e][a].getShip().hitCoor.push([e,a])),t),getMisses:()=>r,getHits:()=>o,isAllSunk:()=>{const e=Object.values(a);let t=!0;return e.forEach((e=>{if(!e.isSunk())return t=!1})),t},populateBd:()=>{const e=Object.keys(a),r=["horizontal","vertical"];return e.forEach((e=>{const t=a[e],o=t.getShip().length;let c=Math.floor(10*Math.random()),s=Math.floor(10*Math.random()),i=Math.floor(2*Math.random());t.getShip().orientation=r[i];let d=l(c,s,t),m=n(d);for(;s+o-1>9||c+o-1>9||!1===m;)c=Math.floor(10*Math.random()),s=Math.floor(10*Math.random()),i=Math.floor(2*Math.random()),t.getShip().orientation=r[i],d=l(c,s,t),m=n(d);u(c,s,t)})),t},resetBoard:()=>{const e=Object.keys(a);t=[],r=[],o=[],e.forEach((e=>{a[e].resetShip()}))}}},r=e=>({number:e,win:!1,board:t(),isComp:!1}),o=(e,t,r,o,a)=>{const n=e.board.getMisses();null===t?n.find((e=>e[0]===o&&e[1]===a))?r.setAttribute("style","background-color: #FCCD2A;"):r.setAttribute("style","background-color: #6A9AB0;"):t.getShip().hitCoor.find((e=>e[0]===o&&e[1]===a))?r.setAttribute("style","background-color: #D91656;"):r.setAttribute("style","background-color: #FCFAEE;")},a=e=>{e.board.createBoard(),(e=>{e.board.getBoard();const t=e.board.getShips();Object.keys(t).forEach((r=>{const o=t[r].getShip().comp;if(0!==o.length){const a=o[0][0],n=o[0][1];e.board.placeShip(a,n,t[r])}}))})(e);const t=e.board.getBoard(),r=e.number;let a=document.getElementById(`board${r}`);for(;a.lastElementChild;)a.removeChild(a.lastElementChild);for(let n=0;n<t.length;n++)for(let l=0;l<t.length;l++){const u=document.createElement("div");u.classList.add(`${r}-square`),u.setAttribute("data-x",`${n}`),u.setAttribute("data-y",`${l}`),o(e,t[n][l],u,n,l),a.appendChild(u)}return a},n=e=>{document.querySelectorAll(`.${e.number}-square`).forEach((e=>{e.setAttribute("disabled",""),e.setAttribute("style","background-color: gray;")}))},l=(e,t,r)=>{let o,a,n;for("player-Two"===r?(o=t.board.getBoard(),a=t.board.getMisses(),n=document.querySelector(`#board${t.number}`)):(o=e.board.getBoard(),a=e.board.getMisses(),n=document.querySelector(`#board${e.number}`));n.lastElementChild;)n.removeChild(n.lastElementChild);for(let l=0;l<o.length;l++)for(let c=0;c<o.length;c++){const s=o[l][c],i=document.createElement("button");"player-One"===r?i.classList.add(`${e.number}-square`):i.classList.add(`${t.number}-square`),i.setAttribute("data-x",`${l}`),i.setAttribute("data-y",`${c}`),u(e,t,i),null!==s&&s.getShip().hitCount>0&&s.getShip().hitCoor.find((e=>e[0]===l&&e[1]===c))&&(i.setAttribute("style","background-color: #D91656;"),i.setAttribute("disabled","")),a.find((e=>e[0]===l&&e[1]===c))&&(i.setAttribute("style","background-color: #15B392;"),i.setAttribute("disabled","")),n.appendChild(i)}},u=(e,t,r)=>{const o=document.querySelector(".dialog"),a=parseInt(r.getAttribute("data-x")),l=parseInt(r.getAttribute("data-y")),u=document.querySelector(".winner"),c=document.querySelector(".end-game"),i=document.querySelector("#play-window"),d=document.querySelector(".player-name"),m=document.querySelector("main");r.addEventListener("click",(h=>{h.preventDefault();const p=r.getAttribute("class"),y=i.getAttribute("data-id"),b=m.getAttribute("class");let S,g;S="One-square"===p?e.board:t.board,g=S.getBoard(),S.receiveAttack(a,l),null===g[a][l]?(n("One-square"===p?t:e),r.setAttribute("style","background-color: #FCCD2A;"),d.textContent="pvc"===b?"Computer`s turn!":"player-One"===y?"Player Two`s turn!":"Player One`s turn!",o.showModal()):(s(g[a][l],"One-square"===p?e.number:t.number),r.setAttribute("style","background-color: #D91656;"),S.isAllSunk()&&(r.setAttribute("style","background-color: #D91656;"),c.showModal(),u.textContent="player-Two"===y?"Congratulations Player Two!":"Congratulations Player One!"))}))},c=e=>{const t=e.board.getShips()[document.querySelector("#ships").value].getShip().length,r=document.querySelector(".shape");for(;r.lastElementChild;)r.removeChild(r.lastElementChild);for(let e=1;e<=t;e++){const e=document.createElement("div");e.classList.add("square"),r.appendChild(e)}},s=(e,t)=>{const r=e.getShip().name,o=document.querySelector(`.shiplist-${t}`).querySelector(`.${r}`).querySelectorAll(".square");e.isSunk()&&o.forEach((e=>{e.setAttribute("style","background-color: #D91656;")}))},i=document.querySelector(".game_mode"),d=document.querySelector("#pvp"),m=document.querySelector("#pvc"),h=document.querySelectorAll(".restart"),p=document.querySelector(".end-game"),y=document.querySelector("form"),b=document.querySelector("#ships"),S=document.querySelector("#orientation");let g=r("One"),f=r("Two");var q,v;q=g,v=f,document.querySelector("#placeShipBtn").addEventListener("click",(e=>{e.preventDefault();let t=document.querySelector("form").getAttribute("id");const r=parseInt(document.querySelector("#y-coor").value),o=parseInt(document.querySelector("#x-coor").value),n=document.querySelector("#ships").value,l=document.querySelector("#orientation").value;let u;u="playerOne-form"===t?q.board.getShips()[n]:v.board.getShips()[n],u.getShip().orientation=l,Number.isNaN(r)||Number.isNaN(o)||("playerOne-form"===t?(q.board.placeShip(r,o,u),a(q)):(v.board.placeShip(r,o,u),a(v)))})),((e,t)=>{const r=document.querySelector("main"),o=document.querySelector("#finBtn"),a=document.querySelector("form"),l=document.querySelector(".player-name");let u=!1;o.addEventListener("click",(o=>{let s;o.preventDefault();const i=r.getAttribute("class");let d=a.getAttribute("id");if(s="playerOne-form"===d?e.board.getShips():t.board.getShips(),Object.values(s).forEach((e=>{const t=e.getShip().comp;return u=0!==t.length})),u){const r=document.querySelector(".shape"),o=document.querySelector("#ships"),u=document.querySelector("#x-coor"),s=document.querySelector("#y-coor"),m=o.querySelector(".battleship"),h=document.querySelector(".message"),p=document.querySelector("span");if(u.value="",s.value="",r.classList.remove("vertical"),m.removeAttribute("selected"),m.setAttribute("selected",""),c(t),"playerOne-form"===d&&(p.textContent="Player Two",a.setAttribute("id","playerTwo-form"),n(e)),"pvc"===i||"playerTwo-form"===d){a.setAttribute("style","display: none;"),h.setAttribute("style","display: none;"),n(t);const e=document.querySelector(".dialog");l.textContent="Player One`s turn!",e.showModal()}}else alert("Please place all the ships first")}))})(g,f),((e,t)=>{const r=document.querySelector("main"),o=document.querySelector(".dialog"),n=document.querySelector("#play-window");document.querySelector("#play").addEventListener("click",(u=>{u.preventDefault();let c=n.getAttribute("data-id");if("player-Two"===c)return a(e),l(e,t,c),n.setAttribute("data-id",`player-${e.number}`),o.close();if("player-One"===c){const u=r.getAttribute("class");return n.setAttribute("data-id",`player-${t.number}`),"pvc"===u?(((e,t)=>{const r=e.board,o=r.getBoard(),n=r.getMisses(),u=r.getHits(),c=document.querySelector("#play-window"),i=document.querySelector(".winner"),d=document.querySelector(".end-game");let m=Math.floor(10*Math.random()),h=Math.floor(10*Math.random()),p=!0;for(;!0===p;)if(n.find((e=>e[0]===m&&e[1]===h))||u.find((e=>e[0]===m&&e[1]===h)))m=Math.floor(10*Math.random()),h=Math.floor(10*Math.random());else if(r.receiveAttack(m,h),null===o[m][h]){const r=`player-${t.number}`;c.setAttribute("data-id",`player-${e.number}`),a(e),l(e,t,r),p=!1}else e.board.isAllSunk()?(p=!1,d.showModal(),i.textContent="Computer won!"):(s(e.board.getBoard()[m][h],e.number),m=Math.floor(10*Math.random()),h=Math.floor(10*Math.random()))})(e,t),o.close()):(a(t),l(e,t,c),o.close())}}))})(g,f),((e,t)=>{const r=document.querySelector("form");document.querySelector("#random").addEventListener("click",(o=>{o.preventDefault(),"playerOne-form"===r.getAttribute("id")?(e.board.populateBd(),a(e)):(t.board.populateBd(),a(t))}))})(g,f),a(g),a(f),c(g),d.addEventListener("click",(e=>(e.preventDefault(),i.close()))),m.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector("main");var r;return(r=f).board.populateBd(),a(r),n(r),t.classList.add("pvc"),i.close()})),h.forEach((e=>e.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector("main"),r=document.querySelector("#play-window"),o=document.querySelector("#x-coor"),n=document.querySelector("#y-coor"),l=b.querySelector(".battleship"),u=document.querySelectorAll(".square"),s=document.querySelector(".shape"),d=document.querySelector(".message"),m=document.querySelector("span");p.close(),y.setAttribute("id","playerOne-form"),y.removeAttribute("style"),t.classList.remove("pvc"),s.classList.remove("vertical"),r.setAttribute("data-id","player-Two"),u.forEach((e=>{e.removeAttribute("style")})),o.value="",n.value="",l.removeAttribute("selected"),l.setAttribute("selected",""),m.textContent="Player One",d.removeAttribute("style"),c(g),g.board.resetBoard(),f.board.resetBoard(),a(g),a(f),i.showModal()})))),b.addEventListener("change",(()=>{c(g)})),S.addEventListener("change",(()=>{const e=document.querySelector(".shape");"vertical"===S.value?e.classList.add("vertical"):e.classList.remove("vertical")})),document.addEventListener("onload",i.showModal())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,